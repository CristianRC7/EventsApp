login.php
<?php
include 'conexion.php';
include 'cors.php';

header('Content-Type: application/json');

$data = json_decode(file_get_contents('php://input'), true);

if(isset($data['usuario']) && isset($data['contrasena'])){
    $usuario = $data['usuario'];
    $contrasena = $data['contrasena'];

    $query = "SELECT * FROM datos WHERE usuario='$usuario' AND contrasena='$contrasena'";
    $result = mysqli_query($connection, $query);

    if(mysqli_num_rows($result) > 0){
        $row = mysqli_fetch_assoc($result);
        echo json_encode(array('success' => true, 'message' => 'Login successful', 'usuario' => $row['usuario'], 'nombre_completo' => $row['nombre_completo'])); // Incluir el nombre completo
    } else {
        echo json_encode(array('success' => false, 'message' => 'Invalid credentials'));
    }
    
} else {
    echo json_encode(array('success' => false, 'message' => 'Missing parameters'));
}

mysqli_close($connection);
?>


profile.js
import React, { useEffect, useState } from 'react';
import { StyleSheet, SafeAreaView, View, Text, TouchableOpacity, Image } from 'react-native';
import { Ionicons } from '@expo/vector-icons'; 
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useNavigation } from '@react-navigation/native';
import * as WebBrowser from 'expo-web-browser';

export default function Profile({ route }) {
  const [nombreCompleto, setNombreCompleto] = useState('');
  const [certificados, setCertificados] = useState([]);
  const navigation = useNavigation();

  useEffect(() => {
    const obtenerNombreCompleto = async () => {
      try {
        const nombre = await AsyncStorage.getItem('nombre_completo');
        setNombreCompleto(nombre);
      } catch (error) {
        console.error('Error al obtener el nombre completo:', error);
      }
    };

    obtenerNombreCompleto();
    obtenerCertificados();
  }, []);

  const obtenerCertificados = async () => {
    try {
      const usuario = await AsyncStorage.getItem('usuario');
      const response = await fetch('http://192.168.0.7/estudio/backend/get_certificado.php', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ usuario }),
      });
      const data = await response.json();
      if (data.success) {
        setCertificados(data.certificados);
      } else {
        console.error('Error al obtener los certificados:', data.message);
      }
    } catch (error) {
      console.error('Error al obtener los certificados:', error);
    }
  };

  const handleCertificadoClick = async (nro_certificado) => {
    try {
      const usuario = await AsyncStorage.getItem('usuario');
      const url = `http://192.168.0.7/estudio/backend/download_certificado.php?usuario=${usuario}&nro_certificado=${nro_certificado}`;
      await WebBrowser.openBrowserAsync(url);
    } catch (error) {
      console.error('Error al descargar el certificado:', error);
    }
  };

  const renderCertificados = () => {
    if (!certificados || certificados.length === 0) {
      return <Text style={styles.noCertificadosText}>Sin certificados registrados</Text>;
    }

    return certificados.map((certificado, index) => (
      <TouchableOpacity key={index} onPress={() => handleCertificadoClick(certificado.nro_certificado)}>
        <View style={styles.certificadoContainer}>
          <Image source={require('../images/pdf_download.png')} style={styles.certificadoImage} />
          <Text style={styles.gestionText}>{certificado.gestion}</Text>
        </View>
      </TouchableOpacity>
    ));
  };

  const handleLogout = async () => {
    await AsyncStorage.removeItem('nombre_completo');
    navigation.navigate('Login');
  };

  useEffect(() => {
    navigation.setOptions({
      headerTitle: 'Perfil',
      headerTitleAlign: 'right',
      headerStyle: {
        backgroundColor: '#cf152d',
      },
      headerTintColor: '#FFFFFF',
      headerTitleStyle: {
        fontWeight: 'bold',
      },
    });
  }, []);

  return (
    <SafeAreaView style={styles.safeArea}>
      <View style={styles.container}>
        <Text style={styles.welcomeText}>¡Bienvenido!</Text>
        <View style={styles.nombreCompletoContainer}>
          <Text style={styles.nombreCompleto}>{nombreCompleto}</Text>
          <Ionicons name="school" size={50} color="#cf152d" style={styles.icon} />
        </View>
        <TouchableOpacity style={styles.button} onPress={handleLogout}>
          <Text style={styles.buttonText}>Cerrar sesión</Text>
        </TouchableOpacity>
        <Text style={styles.sectionText}>Sección de Certificados</Text>
        <View style={styles.certificadosContainer}>
          {renderCertificados()}
        </View>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: '#cf152d',
  },
  container: {
    flex: 1,
    justifyContent: 'flex-start',
    alignItems: 'center',
    padding: 20,
    backgroundColor: '#FFFFFF',
  },
  welcomeText: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  nombreCompletoContainer: {
    alignItems: 'center',
    marginBottom: 20,
  },
  nombreCompleto: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  icon: {
    marginBottom: 5,
    marginTop: 30,
  },
  button: {
    backgroundColor: '#dc3545',
    padding: 15,
    borderRadius: 5,
    width: '100%',
    alignItems: 'center',
    marginTop: 20,
  },
  buttonText: {
    color: '#FFFFFF',
    fontSize: 18,
  },
  sectionText: {
    fontWeight: 'bold',
    marginTop: 20,
    fontSize: 20,
  },
  certificadosContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'center',
    marginTop: 10,
  },
  certificadoContainer: {
    alignItems: 'center',
    marginHorizontal: 10,
    marginBottom: 20,
  },
  certificadoImage: {
    width: 100,
    height: 100,
    marginBottom: 10,
  },
  gestionText: {
    fontSize: 16,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  noCertificadosText: {
    fontSize: 16,
    fontWeight: 'bold',
    textAlign: 'center',
    marginTop: 20,
  },
});
get_certificados.php
<?php
include 'conexion.php';
include 'cors.php';

header('Content-Type: application/json');

$data = json_decode(file_get_contents('php://input'), true);

if(isset($data['usuario'])) {
    $usuario = $data['usuario'];

    $query = "SELECT participacion.nro_certificado, gestion.gestion 
              FROM participacion 
              INNER JOIN datos ON participacion.id_datos = datos.id 
              INNER JOIN gestion ON participacion.id_gestion = gestion.id_gestion
              WHERE datos.usuario='$usuario'";
    $result = mysqli_query($connection, $query);

    if(mysqli_num_rows($result) > 0){
        $certificados = [];
        while($row = mysqli_fetch_assoc($result)) {
            $certificados[] = $row;
        }
        echo json_encode(array('success' => true, 'certificados' => $certificados));
    } else {
        echo json_encode(array('success' => true, 'message' => 'Sin certificados registrados'));
    }
    
} else {
    echo json_encode(array('success' => false, 'message' => 'Missing parameters'));
}

mysqli_close($connection);
?>
download_certificado.php
<?php
include('conexion.php');
require_once('library/vendor/tecnickcom/tcpdf/tcpdf.php');

if (isset($_GET['usuario']) && isset($_GET['nro_certificado'])) {
    $usuario = $_GET['usuario'];
    $nro_certificado = $_GET['nro_certificado'];
    $sql_info = "SELECT datos.nombre_completo, participacion.nro_certificado, gestion.gestion
                 FROM datos
                 INNER JOIN participacion ON datos.id = participacion.id_datos
                 INNER JOIN gestion ON participacion.id_gestion = gestion.id_gestion
                 WHERE datos.usuario = '$usuario' AND participacion.nro_certificado = '$nro_certificado'";

    $result_info = mysqli_query($connection, $sql_info);

    if ($result_info && mysqli_num_rows($result_info) > 0) {
        $row = mysqli_fetch_assoc($result_info);

        $nombreCompleto = $row['nombre_completo'];
        $nroCertificado = $row['nro_certificado'];
        $gestion = $row['gestion'];
        $pdf = new TCPDF('P', 'mm', 'A4', true, 'UTF-8', false);

        $pdf->setPrintHeader(false);
        $pdf->setPrintFooter(false);
        $pdf->SetMargins(0, 0, 0);
        $pdf->SetAutoPageBreak(false, 0);
        $pdf->AddPage();
        $imageFile = "certificados/gestion_$gestion.jpg"; 
        $pdf->Image($imageFile, 0, 0, $pdf->getPageWidth(), $pdf->getPageHeight(), '', '', '', false, 300, '', false, false, 0, false, false, false);

        $pdf->SetFont('helvetica', 'B', 26);

        if ($gestion == 2022) {
            $yNombre = 143; 
        } else {
            $yNombre = 125; 
        }

        $xNombre = ($pdf->getPageWidth() - $pdf->getStringWidth($nombreCompleto)) / 2;
        
        $pdf->Text($xNombre, $yNombre, $nombreCompleto);
        $pdf->SetFont('helvetica', 'B', 14);

        $xNroCertificado = $pdf->getPageWidth() - 25;
        $yNroCertificado = $pdf->getPageHeight() - 10;
        $pdf->Text($xNroCertificado, $yNroCertificado, 'Nro* ' . $nroCertificado);

        $pdf->Output('certificado.pdf', 'D');
    } else {
        echo "Error al obtener información del estudiante: " . mysqli_error($connection);
    }
} else {
    echo 'Usuario o número de certificado no proporcionado';
}

mysqli_close($connection);
?>
lo que pasa es que cuando ingreso un nuevo dato para ese usuario, tiene que cerrar sesion y volver a iniciar para que aparezca el dato del participacion y no quiero eso, podrias hacer que para obtener los datos del de get_certificados sea un consulta frecuente cada vez que ingrese al apartado con una animacion asi como en este ejemplo
import React, { useState, useEffect } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  FlatList, 
  SafeAreaView, 
  Dimensions, 
  TouchableOpacity, 
  Platform, 
  StatusBar,
  Linking,
  ActivityIndicator,
} from 'react-native';
import Icon from 'react-native-vector-icons/FontAwesome';
import { useNavigation } from '@react-navigation/native';

const screenWidth = Dimensions.get('window').width;

const Event = () => {
  const navigation = useNavigation();
  const [selectedDate, setSelectedDate] = useState('2024-06-01'); 
  const [events, setEvents] = useState([]);
  const [isLoading, setIsLoading] = useState(false);  

  useEffect(() => {
    fetchEvents('2024-06-01'); 
  }, []);

  const fetchEvents = (date) => {
    setIsLoading(true); 
    fetch(`https://urbacarsrl.org/yop/backend/get_events.php?fecha=${date}`)
      .then((response) => response.json())
      .then((responseJson) => {
        setIsLoading(false);  
        if (responseJson.success) {
          setEvents(responseJson.events);
        } else {
          console.error(responseJson.message);
        }
      })
      .catch((error) => {
        setIsLoading(false); 
        console.error(error);
      });
  };

  const renderItem = ({ item }) => (
    <View style={styles.item}>
      <Text style={styles.title}>Hora: {item.hora}</Text>
      <Text style={styles.text}>Descripción: {item.descripcion}</Text>
      <Text style={styles.text}>Aula: {item.aula}</Text>
      <Text style={styles.text}>Expositor: {item.expositor}</Text>
    </View>
  );

  const statusBarHeight = Platform.OS === 'android' ? StatusBar.currentHeight : 0;

  return (
    <SafeAreaView style={[styles.safeArea, { paddingTop: statusBarHeight }]}>
      <View style={styles.container}>
        <View style={styles.header}>
          <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>
            <Icon name="arrow-left" size={24} color="#FFFFFF" />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>Eventos</Text>
        </View>

        <TouchableOpacity 
          style={[styles.downloadButton, isLoading ? styles.disabledDateButton : null]}  
          onPress={() => {
            if (!isLoading) {  
              const url = 'https://urbacarsrl.org/yop/backend/pdfs/cronograma.pdf';
              Linking.openURL(url);
            }
          }}
          disabled={isLoading}  
        >
          <Text style={styles.dateButtonText}>Descargar Cronograma</Text>
        </TouchableOpacity>

        <View style={styles.dateButtons}>
          {['2024-06-01', '2024-06-02', '2024-06-03', '2024-06-04'].map((date) => (
            <TouchableOpacity 
              key={date}
              style={[styles.dateButton, isLoading ? styles.disabledDateButton : null]}  
              onPress={() => {
                if (!isLoading) {  
                  setSelectedDate(date);
                  fetchEvents(date);
                }
              }}
              disabled={isLoading}  
            >
              <Text style={styles.dateButtonText}>{`Día ${date.split('-')[2]}`}</Text>
            </TouchableOpacity>
          ))}
        </View>

        {selectedDate && (
          <Text style={styles.selectedDateText}>Eventos del {selectedDate}</Text>
        )}

        {isLoading ? (
          <View style={styles.loadingContainer}>
            <ActivityIndicator size="large" color="#cf152d" />
          </View>
        ) : (
          <FlatList
            data={events}
            renderItem={renderItem}
            keyExtractor={item => item.id.toString()}
            contentContainerStyle={styles.listContent}
          />
        )}
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: '#cf152d',
  },
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#cf152d',
    paddingHorizontal: 20,
    marginBottom: 20,
    paddingBottom: 15,
  },
  backButton: {
    marginRight: 15,
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  listContent: {
    paddingHorizontal: 20,
  },
  item: {
    backgroundColor: '#f2f2f2',
    padding: 20,
    marginBottom: 10,
    borderRadius: 10,
    width: screenWidth - 40,
    alignSelf: 'center',
    borderWidth: 1,
    borderColor: '#e0e0e0',
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  text: {
    fontSize: 16,
    marginBottom: 5,
  },
  downloadButton: {
    paddingHorizontal: 20,
    paddingVertical: 15,
    borderRadius: 25,
    backgroundColor: '#cf152d',
    alignSelf: 'center',
    marginBottom: 20,
  },
  dateButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',  
    marginHorizontal: 20,  
    marginBottom: 20,  
  },
  dateButton: {
    paddingHorizontal: 20,
    paddingVertical: 15,
    borderRadius: 25,
    backgroundColor: '#cf152d',
    flex: 1, 
    marginHorizontal: 5,  
  },
  disabledDateButton: {
    backgroundColor: '#e0e0e0', 
  },
  dateButtonText: {
    textAlign: 'center',  
    fontSize: 16,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  selectedDateText: {
    fontSize: 18,
    fontWeight: 'bold',
    alignSelf: 'center',
    marginBottom: 10,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f2f2f2',
  },
});

export default Event;
